# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test1

# logfile_path=/Users/adityatomer/Desktop/Asynchronous-Systems/
logfile_name=run_system

logfile_path=/Users/adityatomer/Desktop/Asynchronous-Systems/logs/

# logfile_path=/Users/vagarwal/Desktop/

# number of failures to tolerate.  number of replicas is 2t+1.
t = 3
# number of clients
num_client = 10
num_replica = 5
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3
retransmission_case_replica_sleep_time=0
# timeout, in seconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3
nonhead_timeout = 3
max_retransmission_counter=1
client_retransmission_timeout=10
# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
#192.168.0.3; 192.168.0.4
hosts = localhost; localhost;localhost
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2
# checkpoint interval.  take a checkpoint every checkpt_interval slots.
checkpt_interval = 4
client_dict_validation_flag=False
# CLIENT WORKLOAD



# CLIENT WORKLOAD
workload[0] = put('0','0'); append('0','1'); append('0','2'); append('0','3'); get('0')
workload[1] = put('1','0'); append('1','1'); append('1','2'); append('1','3'); get('1')
workload[2] = put('2','0'); append('2','1'); append('2','2'); append('2','3'); get('2')
workload[3] = put('3','0'); append('3','1'); append('3','2'); append('3','3'); get('3')
workload[4] = put('4','0'); append('4','1'); append('4','2'); append('4','3'); get('4')
workload[5] = put('5','0'); append('5','1'); append('5','2'); append('5','3'); get('5')
workload[6] = put('6','0'); append('6','1'); append('6','2'); append('6','3'); get('6')
workload[7] = put('7','0'); append('7','1'); append('7','2'); append('7','3'); get('7')
workload[8] = put('8','0'); append('8','1'); append('8','2'); append('8','3'); get('8')
workload[9] = put('9','0'); append('9','1'); append('9','2'); append('9','3'); get('9')

# FAILURE SCENARIO: MESSAGE COUNTERS RESET ACROSS CONFIGS
failures[0,0] = checkpoint(-1,0),extra_op()
failures[0,1] = checkpoint(-1,0),extra_op(); checkpoint(-1,1),change_operation()
failures[0,2] = checkpoint(-1,0),extra_op()
#
failures[1,1] = checkpoint(-1,0),extra_op()
failures[1,2] = checkpoint(-1,0),extra_op(); checkpoint(-1,1),change_operation()
failures[1,3] = checkpoint(-1,0),extra_op()
#
failures[2,2] = checkpoint(-1,0),extra_op()
failures[2,3] = checkpoint(-1,0),extra_op(); checkpoint(-1,1),change_operation()
failures[2,4] = checkpoint(-1,0),extra_op()
#
failures[3,3] = checkpoint(-1,0),extra_op()
failures[3,4] = checkpoint(-1,0),extra_op(); checkpoint(-1,1),change_operation()
failures[3,5] = checkpoint(-1,0),extra_op()

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
######**********NORMAL CASE**********************
# failures[0,0] = client_request(1,1),changeOperation();shuttle(1,5),changeOperation();client_request(1,5), changeOperation()
# failures[0,1] = shuttle(1,1),changeOperation();shuttle(1,2),changeResult();shuttle(1,3),DropResultStatement();resultShuttle(1,1),DropResultStatement();resultShuttle(1,2),changeResult()
# failures[0,2] = shuttle(1,3),changeResult();shuttle(1,2),DropResultStatement();resultShuttle(1,3),DropResultStatement();resultShuttle(1,1),changeResult()

#***********RETRANSMISSION CASE*******************
# failures[0,0] = forwardRequest(1,1),changeResult();forwardRequest(1,1),DropResultStatement();
# failures[0,1] = 
# failures[0,0] = client_request(2,5), crash()
# failures[1,2] = result_shuttle(0,1),drop(); shuttle(1,3),omit_send()
# failures[0,0] = client_request(0,1),change_operation();shuttle(0,5),change_operation()

